// <auto-generated />
using System;
using DilekYildizimSensin.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DilekYildizimSensin.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241101184104_secondMigration")]
    partial class secondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "c5a19039-4be1-4f01-863e-e643500d5f39",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "0bb9151a-0eb1-4316-884d-5c626c3c7b69",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "b87c545e-441b-484c-ae35-d5c037e9af48",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "4af2165d-4845-4473-bdea-d4d391cf81e1",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Erhan",
                            Gender = 2,
                            ImageUrl = "https://static.vecteezy.com/system/resources/previews/024/183/525/non_2x/avatar-of-a-man-portrait-of-a-young-guy-illustration-of-male-character-in-modern-color-style-vector.jpg",
                            LastName = "Zorlu",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM02htHXEONNyjqrUdd4FiiaGvLQl7YKP/GJFzFaeEszerrdbtqIrME2KWAVpQxfqg==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            Score = 520,
                            SecurityStamp = "753c67eb-34c2-42b2-84bf-9b23a1a9bfae",
                            TwoFactorEnabled = false,
                            UserName = "erhanzorlu"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "ccc5ba7b-0deb-49fb-8140-88feea4c74bc",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            ImageUrl = "https://img.freepik.com/premium-photo/graphic-designer-digital-avatar-generative-ai_934475-9292.jpg",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJkSsEurBeY6pCaFq0VhV7/+hr6RvOif8TWsWOEoS/fD5bI1Ovq3KT35NSMzKhv5JQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            Score = 123,
                            SecurityStamp = "4eb6a33c-740b-404f-a00c-ff612d44eab1",
                            TwoFactorEnabled = false,
                            UserName = "umutyasar"
                        },
                        new
                        {
                            Id = new Guid("5bdf3b72-62af-4d30-8bc8-0b6cf723ae57"),
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "c8a11971-c2d2-4965-97cd-49fed7d4f846",
                            Email = "ahmetyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmet",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AHMETYILDIZ@GMAIL.COM",
                            PhoneNumber = "+905439999987",
                            PhoneNumberConfirmed = false,
                            Score = 320,
                            SecurityStamp = "4163a942-f0aa-4707-b739-5a26e3bf2945",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyildiz"
                        },
                        new
                        {
                            Id = new Guid("c9a80a3a-f3af-439b-a4a3-985e65272a22"),
                            AccessFailedCount = 0,
                            Age = 19,
                            ConcurrencyStamp = "269b3487-72f6-4986-9790-d4b405cf20a8",
                            Email = "melisekinci@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melis",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Ekinci",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELISEKINCI@GMAIL.COM",
                            NormalizedUserName = "MELISEKINCI@GMAIL.COM",
                            PhoneNumber = "+905439999986",
                            PhoneNumberConfirmed = false,
                            Score = 450,
                            SecurityStamp = "1f0ec048-6acd-478d-8792-aa55eb51cd18",
                            TwoFactorEnabled = false,
                            UserName = "melisekinci"
                        },
                        new
                        {
                            Id = new Guid("a5b6d3ea-7baa-49b8-808c-2d7d72f9c0d1"),
                            AccessFailedCount = 0,
                            Age = 35,
                            ConcurrencyStamp = "b7fe68b2-c270-403a-a288-907dc4b5af70",
                            Email = "cemakyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cem",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Akyildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEMAKYILDIZ@GMAIL.COM",
                            NormalizedUserName = "CEMAKYILDIZ@GMAIL.COM",
                            PhoneNumber = "+905439999985",
                            PhoneNumberConfirmed = false,
                            Score = 30,
                            SecurityStamp = "f0b8714a-0438-4b4e-9ac1-200a2af405c0",
                            TwoFactorEnabled = false,
                            UserName = "cemakyildiz"
                        },
                        new
                        {
                            Id = new Guid("e48db928-a5fc-4a9c-b72e-6373a453c6c7"),
                            AccessFailedCount = 0,
                            Age = 23,
                            ConcurrencyStamp = "5f9b1d60-9dad-4e13-832d-4eb0c48a8256",
                            Email = "serdarkaya@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Serdar",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERDARKAYA@GMAIL.COM",
                            NormalizedUserName = "SERDARKAYA@GMAIL.COM",
                            PhoneNumber = "+905439999984",
                            PhoneNumberConfirmed = false,
                            Score = 390,
                            SecurityStamp = "4a267e1f-bb2f-475c-8da9-019d3c113cf5",
                            TwoFactorEnabled = false,
                            UserName = "serdarkaya"
                        },
                        new
                        {
                            Id = new Guid("99f21431-f75d-4b53-b0bc-c46a5a8db1a9"),
                            AccessFailedCount = 0,
                            Age = 29,
                            ConcurrencyStamp = "0050cd9c-ad57-415e-8d10-7dd620e4d303",
                            Email = "elifdemir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Elif",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIFDEMIR@GMAIL.COM",
                            NormalizedUserName = "ELIFDEMIR@GMAIL.COM",
                            PhoneNumber = "+905439999983",
                            PhoneNumberConfirmed = false,
                            Score = 340,
                            SecurityStamp = "88c00f91-c788-4676-be84-2bee779d7957",
                            TwoFactorEnabled = false,
                            UserName = "elifdemir"
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb")
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BadgeIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            BadgeIcon = "https://w7.pngwing.com/pngs/423/1004/png-transparent-medal-gold-winner-badge-achievement-reward-army-champion-awards-icon.png",
                            BadgeName = "Karda Yürüyen",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 378, DateTimeKind.Local).AddTicks(1480),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6296d6f2-052e-40fb-bf0b-72eb2ac34a6d"),
                            BadgeIcon = "https://static.vecteezy.com/system/resources/previews/014/606/031/original/golden-yellow-trophy-icon-for-the-winner-of-a-sports-event-png.png",
                            BadgeName = "Sosyal Kelebek",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 378, DateTimeKind.Local).AddTicks(1535),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("820b74d4-c6f7-4823-a45e-6dbd41311212"),
                            BadgeIcon = "https://e7.pngegg.com/pngimages/1002/183/png-clipart-smiley-smiley-miscellaneous-smiley.png",
                            BadgeName = "Gülen Yüz",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 378, DateTimeKind.Local).AddTicks(1540),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5d706d85-8780-43eb-9f0b-21f6d6ae9a07"),
                            BadgeIcon = "https://www.shutterstock.com/image-vector/transparent-winner-icon-png-vector-260nw-1945885621.jpg",
                            BadgeName = "Yüce Gönüllü",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 378, DateTimeKind.Local).AddTicks(1544),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8bf1da2f-a48e-4ecf-94a0-3b85e3cb32d2"),
                            BadgeIcon = "https://img.lovepik.com/png/20231009/Outstanding-color-male-employees-of-the-month-staff-the-company_136776_wh860.png",
                            BadgeName = "Ayın Elemanı",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 378, DateTimeKind.Local).AddTicks(1548),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1328a6c8-9ebd-4b22-978a-453f0c31bbdf"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 378, DateTimeKind.Utc).AddTicks(2643),
                            EventName = "Ofis Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1e7bc8e4-59a8-4f63-af21-c7697a727f64"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 378, DateTimeKind.Utc).AddTicks(2645),
                            EventName = "Dilek Alma Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3c5b8e39-a8f8-4671-a573-2e1e5e8a6f85"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 378, DateTimeKind.Utc).AddTicks(2648),
                            EventName = "Dilek Gerçekleştirme Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e6481d73-37e2-4b7e-a817-a7d0921797c6"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 378, DateTimeKind.Utc).AddTicks(2650),
                            EventName = "Stant Etkinliği",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserBadge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53445d2c-7b02-4caa-b09c-00248a2cea7f"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 379, DateTimeKind.Local).AddTicks(2967),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1cf0a5b4-ef09-41fc-88c6-a5db6821042e"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("8bf1da2f-a48e-4ecf-94a0-3b85e3cb32d2"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 379, DateTimeKind.Local).AddTicks(2996),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bdbdc92b-7c80-4b41-9c74-ba0e8a766f12"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("5d706d85-8780-43eb-9f0b-21f6d6ae9a07"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 379, DateTimeKind.Local).AddTicks(3001),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("87277119-826b-486b-9055-8a26c443ce57"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            BadgeId = new Guid("820b74d4-c6f7-4823-a45e-6dbd41311212"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 379, DateTimeKind.Local).AddTicks(3005),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fe445a87-bf6c-49f8-a3d5-e8cc3737d896"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            BadgeId = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 21, 41, 3, 379, DateTimeKind.Local).AddTicks(3009),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a99c490-b17c-47f8-a6e8-a820cd955212"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 379, DateTimeKind.Utc).AddTicks(5198),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("1328a6c8-9ebd-4b22-978a-453f0c31bbdf"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ca77e4ed-63ed-4b82-9395-c2c76d299c7d"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 379, DateTimeKind.Utc).AddTicks(5203),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("1e7bc8e4-59a8-4f63-af21-c7697a727f64"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d8d288bd-cd09-4d8a-993a-1b1d531fd83a"),
                            AppUserId = new Guid("5bdf3b72-62af-4d30-8bc8-0b6cf723ae57"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 379, DateTimeKind.Utc).AddTicks(5206),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("3c5b8e39-a8f8-4671-a573-2e1e5e8a6f85"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9d4d3874-b413-43d3-96b1-bb04a2dd21dd"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 18, 41, 3, 379, DateTimeKind.Utc).AddTicks(5209),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("e6481d73-37e2-4b7e-a817-a7d0921797c6"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.VolunteerScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("VolunteerScores");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRoleClaim", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserClaim", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserLogin", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserRole", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserToken", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserBadge", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany("UserBadges")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserEvent", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany("UserEvents")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.VolunteerScore", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUser", b =>
                {
                    b.Navigation("UserBadges");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Event", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
