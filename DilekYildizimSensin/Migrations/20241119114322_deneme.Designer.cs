// <auto-generated />
using System;
using DilekYildizimSensin.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DilekYildizimSensin.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241119114322_deneme")]
    partial class deneme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "c65896ba-ab0b-4300-97e5-bf12c9cab97f",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "c189722d-58dd-4283-9cc8-bd61ee3b0d74",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "8aab8acf-9f70-410e-b8d6-ee981b6faef3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "4cff066b-dc2f-4455-a192-3b1606c4d3f6",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Erhan",
                            Gender = 2,
                            ImageUrl = "https://static.vecteezy.com/system/resources/previews/024/183/525/non_2x/avatar-of-a-man-portrait-of-a-young-guy-illustration-of-male-character-in-modern-color-style-vector.jpg",
                            LastName = "Zorlu",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPddRJvXpqxmqktt1vLbkDSyVCzH6ju6vBLNSN4ZcmaswyVCaFvNrLezeiEz83IPow==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            Score = 520,
                            SecurityStamp = "84f92292-76a9-4ddc-a3d4-ccb70dd9957c",
                            TwoFactorEnabled = false,
                            UserName = "erhanzorlu"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "e08d421e-2c12-4178-9b1f-f604a3cdc38f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            ImageUrl = "https://img.freepik.com/premium-photo/graphic-designer-digital-avatar-generative-ai_934475-9292.jpg",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECvcMJXhC8e24LLiZ85jQWgrYK6q5P+tXefPWDATfKyXEeF2nahKbVSZBB71J1KBZw==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            Score = 123,
                            SecurityStamp = "7da7b1f0-d798-4fef-acd4-5fe2b668e677",
                            TwoFactorEnabled = false,
                            UserName = "umutyasar"
                        },
                        new
                        {
                            Id = new Guid("5bdf3b72-62af-4d30-8bc8-0b6cf723ae57"),
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "de761018-44c6-49b1-8420-6887ca0a89f0",
                            Email = "ahmetyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmet",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AHMETYILDIZ@GMAIL.COM",
                            PhoneNumber = "+905439999987",
                            PhoneNumberConfirmed = false,
                            Score = 320,
                            SecurityStamp = "8908c953-f479-42d5-9cba-c5f03999c956",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyildiz"
                        },
                        new
                        {
                            Id = new Guid("c9a80a3a-f3af-439b-a4a3-985e65272a22"),
                            AccessFailedCount = 0,
                            Age = 19,
                            ConcurrencyStamp = "1fefa080-01ff-47e0-9d6c-b885548ba6b2",
                            Email = "melisekinci@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melis",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Ekinci",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELISEKINCI@GMAIL.COM",
                            NormalizedUserName = "MELISEKINCI@GMAIL.COM",
                            PhoneNumber = "+905439999986",
                            PhoneNumberConfirmed = false,
                            Score = 450,
                            SecurityStamp = "217a5218-e539-49e8-b206-213871b76559",
                            TwoFactorEnabled = false,
                            UserName = "melisekinci"
                        },
                        new
                        {
                            Id = new Guid("a5b6d3ea-7baa-49b8-808c-2d7d72f9c0d1"),
                            AccessFailedCount = 0,
                            Age = 35,
                            ConcurrencyStamp = "4db3549b-fa60-4c06-bc81-e985f22f723a",
                            Email = "cemakyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cem",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Akyildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEMAKYILDIZ@GMAIL.COM",
                            NormalizedUserName = "CEMAKYILDIZ@GMAIL.COM",
                            PhoneNumber = "+905439999985",
                            PhoneNumberConfirmed = false,
                            Score = 30,
                            SecurityStamp = "e72f1f51-8b61-4b8a-a0e0-74162e8c92fe",
                            TwoFactorEnabled = false,
                            UserName = "cemakyildiz"
                        },
                        new
                        {
                            Id = new Guid("e48db928-a5fc-4a9c-b72e-6373a453c6c7"),
                            AccessFailedCount = 0,
                            Age = 23,
                            ConcurrencyStamp = "4753fad8-da55-4ba2-8fa7-b02a8e86804d",
                            Email = "serdarkaya@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Serdar",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERDARKAYA@GMAIL.COM",
                            NormalizedUserName = "SERDARKAYA@GMAIL.COM",
                            PhoneNumber = "+905439999984",
                            PhoneNumberConfirmed = false,
                            Score = 390,
                            SecurityStamp = "37191ebb-5399-47ca-b245-e6b89d7d6ffc",
                            TwoFactorEnabled = false,
                            UserName = "serdarkaya"
                        },
                        new
                        {
                            Id = new Guid("99f21431-f75d-4b53-b0bc-c46a5a8db1a9"),
                            AccessFailedCount = 0,
                            Age = 29,
                            ConcurrencyStamp = "a42c3226-0038-4ca0-951e-10863e21962e",
                            Email = "elifdemir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Elif",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIFDEMIR@GMAIL.COM",
                            NormalizedUserName = "ELIFDEMIR@GMAIL.COM",
                            PhoneNumber = "+905439999983",
                            PhoneNumberConfirmed = false,
                            Score = 340,
                            SecurityStamp = "45ceffb3-582a-44ca-99ca-8ca0ac2763cf",
                            TwoFactorEnabled = false,
                            UserName = "elifdemir"
                        },
                        new
                        {
                            Id = new Guid("c60543d1-ed62-495b-ae86-7038fcce59f1"),
                            AccessFailedCount = 0,
                            Age = 35,
                            ConcurrencyStamp = "51c50f3d-0792-4ff4-b5f0-1e3a3ee66f1e",
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAIL.COM",
                            NormalizedUserName = "AHMETYILMAZ@GMAIL.COM",
                            PhoneNumber = "+905439999984",
                            PhoneNumberConfirmed = true,
                            Score = 420,
                            SecurityStamp = "06be67b5-77b9-4777-8d60-f24cebd0fd79",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = new Guid("d2e3b435-8c7f-4905-bcde-223344556677"),
                            AccessFailedCount = 0,
                            Age = 28,
                            ConcurrencyStamp = "13d122a6-004a-48bd-b178-2f6408113a00",
                            Email = "aysegunes@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayşe",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEGUNES@GMAIL.COM",
                            NormalizedUserName = "AYSEGUNES@GMAIL.COM",
                            PhoneNumber = "+905439999985",
                            PhoneNumberConfirmed = false,
                            Score = 310,
                            SecurityStamp = "6cabaa65-ebd0-44f2-b690-94f7b33c79af",
                            TwoFactorEnabled = false,
                            UserName = "aysegunes"
                        },
                        new
                        {
                            Id = new Guid("8515f6a5-2f62-4cc9-a084-9ac934553cbc"),
                            AccessFailedCount = 0,
                            Age = 32,
                            ConcurrencyStamp = "05ea50a4-0e2a-4478-adc6-18a856981359",
                            Email = "mehmetcan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Can",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETCAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETCAN@GMAIL.COM",
                            PhoneNumber = "+905439999986",
                            PhoneNumberConfirmed = true,
                            Score = 500,
                            SecurityStamp = "7e0a96d0-a6a7-4e9f-8b0f-96cc423969df",
                            TwoFactorEnabled = false,
                            UserName = "mehmetcan"
                        },
                        new
                        {
                            Id = new Guid("71216b21-b5dd-417f-96d5-e6bee5b33f6d"),
                            AccessFailedCount = 0,
                            Age = 26,
                            ConcurrencyStamp = "e9fa04ea-2c52-42d9-b198-39d62229662c",
                            Email = "zeynepkara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPKARA@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPKARA@GMAIL.COM",
                            PhoneNumber = "+905439999987",
                            PhoneNumberConfirmed = false,
                            Score = 280,
                            SecurityStamp = "a713e8f0-8db7-4abd-a9d0-9c634e61ca84",
                            TwoFactorEnabled = false,
                            UserName = "zeynepkara"
                        },
                        new
                        {
                            Id = new Guid("8c01427b-4877-4513-b4bf-b5fa9093a279"),
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "7d608577-d0ae-49e7-acf1-28d45b1b4197",
                            Email = "mertturan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mert",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Turan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERTTURAN@GMAIL.COM",
                            NormalizedUserName = "MERTTURAN@GMAIL.COM",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            Score = 380,
                            SecurityStamp = "09e1d221-443d-4922-b24b-a7bdbc94309b",
                            TwoFactorEnabled = false,
                            UserName = "mertturan"
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb")
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BadgeIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            BadgeIcon = "https://w7.pngwing.com/pngs/423/1004/png-transparent-medal-gold-winner-badge-achievement-reward-army-champion-awards-icon.png",
                            BadgeName = "Karda Yürüyen",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 86, DateTimeKind.Local).AddTicks(2264),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6296d6f2-052e-40fb-bf0b-72eb2ac34a6d"),
                            BadgeIcon = "https://static.vecteezy.com/system/resources/previews/014/606/031/original/golden-yellow-trophy-icon-for-the-winner-of-a-sports-event-png.png",
                            BadgeName = "Sosyal Kelebek",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 86, DateTimeKind.Local).AddTicks(2307),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("820b74d4-c6f7-4823-a45e-6dbd41311212"),
                            BadgeIcon = "https://e7.pngegg.com/pngimages/1002/183/png-clipart-smiley-smiley-miscellaneous-smiley.png",
                            BadgeName = "Gülen Yüz",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 86, DateTimeKind.Local).AddTicks(2312),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5d706d85-8780-43eb-9f0b-21f6d6ae9a07"),
                            BadgeIcon = "https://www.shutterstock.com/image-vector/transparent-winner-icon-png-vector-260nw-1945885621.jpg",
                            BadgeName = "Yüce Gönüllü",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 86, DateTimeKind.Local).AddTicks(2316),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8bf1da2f-a48e-4ecf-94a0-3b85e3cb32d2"),
                            BadgeIcon = "https://img.lovepik.com/png/20231009/Outstanding-color-male-employees-of-the-month-staff-the-company_136776_wh860.png",
                            BadgeName = "Ayın Elemanı",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 86, DateTimeKind.Local).AddTicks(2320),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1328a6c8-9ebd-4b22-978a-453f0c31bbdf"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 86, DateTimeKind.Utc).AddTicks(3334),
                            EventName = "Ofis Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1e7bc8e4-59a8-4f63-af21-c7697a727f64"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 86, DateTimeKind.Utc).AddTicks(3338),
                            EventName = "Dilek Alma Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3c5b8e39-a8f8-4671-a573-2e1e5e8a6f85"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 86, DateTimeKind.Utc).AddTicks(3340),
                            EventName = "Dilek Gerçekleştirme Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e6481d73-37e2-4b7e-a817-a7d0921797c6"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 86, DateTimeKind.Utc).AddTicks(3347),
                            EventName = "Stant Etkinliği",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserBadge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b2faa33-34c5-4d8e-99ee-69995946afe2"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 87, DateTimeKind.Local).AddTicks(3242),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fe9f94fb-2e73-4286-9c96-8a1a779c860a"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("8bf1da2f-a48e-4ecf-94a0-3b85e3cb32d2"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 87, DateTimeKind.Local).AddTicks(3267),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("45b1b0d9-0f56-4dbc-848e-01e0bf1e6eb8"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("5d706d85-8780-43eb-9f0b-21f6d6ae9a07"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 87, DateTimeKind.Local).AddTicks(3272),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("443dff9c-e57a-4620-958a-22cee19ceca4"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            BadgeId = new Guid("820b74d4-c6f7-4823-a45e-6dbd41311212"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 87, DateTimeKind.Local).AddTicks(3276),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("22cbb93f-305f-40ef-8a7f-fab91f0e1cfd"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            BadgeId = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 14, 43, 21, 87, DateTimeKind.Local).AddTicks(3285),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ff211cf-7b9d-4586-a28b-469cd66a9de1"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 87, DateTimeKind.Utc).AddTicks(7020),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("1328a6c8-9ebd-4b22-978a-453f0c31bbdf"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b166f8af-5b20-4ae4-bfdb-312ebbfe4c12"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 87, DateTimeKind.Utc).AddTicks(7027),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("1e7bc8e4-59a8-4f63-af21-c7697a727f64"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8b0439c6-767e-493a-8989-02de018a160e"),
                            AppUserId = new Guid("5bdf3b72-62af-4d30-8bc8-0b6cf723ae57"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 87, DateTimeKind.Utc).AddTicks(7034),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("3c5b8e39-a8f8-4671-a573-2e1e5e8a6f85"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("557e4039-f0e0-45d3-91e2-ca8ca4eff40d"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 19, 11, 43, 21, 87, DateTimeKind.Utc).AddTicks(7045),
                            EventDate = new DateOnly(1, 1, 1),
                            EventId = new Guid("e6481d73-37e2-4b7e-a817-a7d0921797c6"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.VolunteerScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("VolunteerScores");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRoleClaim", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserClaim", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserLogin", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserRole", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserToken", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserBadge", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany("UserBadges")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserEvent", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany("UserEvents")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.VolunteerScore", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUser", b =>
                {
                    b.Navigation("UserBadges");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Event", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
