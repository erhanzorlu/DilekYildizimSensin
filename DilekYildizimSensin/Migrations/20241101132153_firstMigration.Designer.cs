// <auto-generated />
using System;
using DilekYildizimSensin.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DilekYildizimSensin.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241101132153_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "1347112e-35ef-4755-a20e-26afa666cae8",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "a6fedf89-4dd6-4eb0-8c20-fde2dc7bf69f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "46c061a7-3a3d-4546-a8a0-d0c6dc2a1f99",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "2f9c987d-0dba-472b-8199-dd005cd9730c",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Erhan",
                            Gender = 2,
                            ImageUrl = "https://static.vecteezy.com/system/resources/previews/024/183/525/non_2x/avatar-of-a-man-portrait-of-a-young-guy-illustration-of-male-character-in-modern-color-style-vector.jpg",
                            LastName = "Zorlu",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/uGZkPKmZlWa6ZgRtijLOVfJSU+vs6MRuMAyMjY5D2aP2/IggLQXy2d82xFbTsRA==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            Score = 520,
                            SecurityStamp = "1243dba8-5d3c-4e97-8130-eb7cb65769e3",
                            TwoFactorEnabled = false,
                            UserName = "erhanzorlu"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "458c2473-23cc-425d-93b1-6277c12081a6",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            ImageUrl = "https://img.freepik.com/premium-photo/graphic-designer-digital-avatar-generative-ai_934475-9292.jpg",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzFGgQcxrlLbUpxmooMHWPAmPto1gqQIH1fpn71sPc0wTwWtfjYNBzAIFTYRR5/wQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            Score = 123,
                            SecurityStamp = "d81f158f-101d-4bdb-bf5a-9afa5cc73b6a",
                            TwoFactorEnabled = false,
                            UserName = "umutyasar"
                        },
                        new
                        {
                            Id = new Guid("5bdf3b72-62af-4d30-8bc8-0b6cf723ae57"),
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "56cb57d1-d07a-4417-8a93-a04c7c4eb783",
                            Email = "ahmetyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmet",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AHMETYILDIZ@GMAIL.COM",
                            PhoneNumber = "+905439999987",
                            PhoneNumberConfirmed = false,
                            Score = 320,
                            SecurityStamp = "f5e8d43c-8c59-4406-84f5-1b23e839cc78",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyildiz"
                        },
                        new
                        {
                            Id = new Guid("c9a80a3a-f3af-439b-a4a3-985e65272a22"),
                            AccessFailedCount = 0,
                            Age = 19,
                            ConcurrencyStamp = "a93b9764-45f9-48b8-bb1d-4274076e0d7e",
                            Email = "melisekinci@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melis",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Ekinci",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELISEKINCI@GMAIL.COM",
                            NormalizedUserName = "MELISEKINCI@GMAIL.COM",
                            PhoneNumber = "+905439999986",
                            PhoneNumberConfirmed = false,
                            Score = 450,
                            SecurityStamp = "73f46d41-4d14-4c6b-bde0-caa4ffa5517d",
                            TwoFactorEnabled = false,
                            UserName = "melisekinci"
                        },
                        new
                        {
                            Id = new Guid("a5b6d3ea-7baa-49b8-808c-2d7d72f9c0d1"),
                            AccessFailedCount = 0,
                            Age = 35,
                            ConcurrencyStamp = "b140f918-56f6-4ced-91d0-74140c848bb5",
                            Email = "cemakyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cem",
                            Gender = 2,
                            ImageUrl = "image",
                            LastName = "Akyildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEMAKYILDIZ@GMAIL.COM",
                            NormalizedUserName = "CEMAKYILDIZ@GMAIL.COM",
                            PhoneNumber = "+905439999985",
                            PhoneNumberConfirmed = false,
                            Score = 30,
                            SecurityStamp = "56d1683e-3fdb-466c-9162-1350d6bb3680",
                            TwoFactorEnabled = false,
                            UserName = "cemakyildiz"
                        },
                        new
                        {
                            Id = new Guid("e48db928-a5fc-4a9c-b72e-6373a453c6c7"),
                            AccessFailedCount = 0,
                            Age = 23,
                            ConcurrencyStamp = "381abd04-5e62-4536-bd70-f84cd6a3d981",
                            Email = "serdarkaya@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Serdar",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERDARKAYA@GMAIL.COM",
                            NormalizedUserName = "SERDARKAYA@GMAIL.COM",
                            PhoneNumber = "+905439999984",
                            PhoneNumberConfirmed = false,
                            Score = 390,
                            SecurityStamp = "ee9b2005-b24d-4052-a550-3811bfbd0245",
                            TwoFactorEnabled = false,
                            UserName = "serdarkaya"
                        },
                        new
                        {
                            Id = new Guid("99f21431-f75d-4b53-b0bc-c46a5a8db1a9"),
                            AccessFailedCount = 0,
                            Age = 29,
                            ConcurrencyStamp = "2ce8f44f-3bf9-44af-af21-a757a4240818",
                            Email = "elifdemir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Elif",
                            Gender = 1,
                            ImageUrl = "image",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIFDEMIR@GMAIL.COM",
                            NormalizedUserName = "ELIFDEMIR@GMAIL.COM",
                            PhoneNumber = "+905439999983",
                            PhoneNumberConfirmed = false,
                            Score = 340,
                            SecurityStamp = "7916ae57-1d4a-448d-abbe-336c71e49201",
                            TwoFactorEnabled = false,
                            UserName = "elifdemir"
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb")
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BadgeIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            BadgeIcon = "https://w7.pngwing.com/pngs/423/1004/png-transparent-medal-gold-winner-badge-achievement-reward-army-champion-awards-icon.png",
                            BadgeName = "Karda Yürüyen",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 482, DateTimeKind.Local).AddTicks(8920),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6296d6f2-052e-40fb-bf0b-72eb2ac34a6d"),
                            BadgeIcon = "https://static.vecteezy.com/system/resources/previews/014/606/031/original/golden-yellow-trophy-icon-for-the-winner-of-a-sports-event-png.png",
                            BadgeName = "Sosyal Kelebek",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 482, DateTimeKind.Local).AddTicks(8988),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("820b74d4-c6f7-4823-a45e-6dbd41311212"),
                            BadgeIcon = "https://e7.pngegg.com/pngimages/1002/183/png-clipart-smiley-smiley-miscellaneous-smiley.png",
                            BadgeName = "Gülen Yüz",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 482, DateTimeKind.Local).AddTicks(8996),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5d706d85-8780-43eb-9f0b-21f6d6ae9a07"),
                            BadgeIcon = "https://www.shutterstock.com/image-vector/transparent-winner-icon-png-vector-260nw-1945885621.jpg",
                            BadgeName = "Yüce Gönüllü",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 482, DateTimeKind.Local).AddTicks(9003),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8bf1da2f-a48e-4ecf-94a0-3b85e3cb32d2"),
                            BadgeIcon = "https://img.lovepik.com/png/20231009/Outstanding-color-male-employees-of-the-month-staff-the-company_136776_wh860.png",
                            BadgeName = "Ayın Elemanı",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 482, DateTimeKind.Local).AddTicks(9010),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1328a6c8-9ebd-4b22-978a-453f0c31bbdf"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 483, DateTimeKind.Utc).AddTicks(805),
                            EventName = "Ofis Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1e7bc8e4-59a8-4f63-af21-c7697a727f64"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 483, DateTimeKind.Utc).AddTicks(824),
                            EventName = "Dilek Alma Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3c5b8e39-a8f8-4671-a573-2e1e5e8a6f85"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 483, DateTimeKind.Utc).AddTicks(827),
                            EventName = "Dilek Gerçekleştirme Etkinliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e6481d73-37e2-4b7e-a817-a7d0921797c6"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 483, DateTimeKind.Utc).AddTicks(830),
                            EventName = "Stant Etkinliği",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserBadge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0091448-7fb7-4574-8a32-ecb16e2f548d"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 485, DateTimeKind.Local).AddTicks(1540),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0c632c45-0e23-4445-8d7e-0be8f775ccaa"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("8bf1da2f-a48e-4ecf-94a0-3b85e3cb32d2"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 485, DateTimeKind.Local).AddTicks(1587),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f41171d1-090b-4716-af01-82163c403320"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            BadgeId = new Guid("5d706d85-8780-43eb-9f0b-21f6d6ae9a07"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 485, DateTimeKind.Local).AddTicks(1607),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8efc3530-6112-4463-b68e-8e39ce91167e"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            BadgeId = new Guid("820b74d4-c6f7-4823-a45e-6dbd41311212"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 485, DateTimeKind.Local).AddTicks(1615),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b90322a6-d3fa-4665-9d39-ffef9bee1b83"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            BadgeId = new Guid("0299a520-25ca-49ec-9492-035ccf2ed5b8"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 16, 21, 52, 485, DateTimeKind.Local).AddTicks(1621),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec24b9f6-6bd3-42f9-bf42-41c77caa36bb"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 485, DateTimeKind.Utc).AddTicks(5140),
                            EventId = new Guid("1328a6c8-9ebd-4b22-978a-453f0c31bbdf"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1a3cc996-9d61-43d8-816c-b9471159f9e5"),
                            AppUserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 485, DateTimeKind.Utc).AddTicks(5148),
                            EventId = new Guid("1e7bc8e4-59a8-4f63-af21-c7697a727f64"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d0ce9ee2-44bd-4d7e-b9eb-c76584e5d71f"),
                            AppUserId = new Guid("5bdf3b72-62af-4d30-8bc8-0b6cf723ae57"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 485, DateTimeKind.Utc).AddTicks(5160),
                            EventId = new Guid("3c5b8e39-a8f8-4671-a573-2e1e5e8a6f85"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fc8e85b1-7f89-47ee-9d72-03877626e305"),
                            AppUserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 11, 1, 13, 21, 52, 485, DateTimeKind.Utc).AddTicks(5165),
                            EventId = new Guid("e6481d73-37e2-4b7e-a817-a7d0921797c6"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.VolunteerScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("VolunteerScores");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppRoleClaim", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserClaim", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserLogin", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserRole", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUserToken", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserBadge", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany("UserBadges")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.UserEvent", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany("UserEvents")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DilekYildizimSensin.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.VolunteerScore", b =>
                {
                    b.HasOne("DilekYildizimSensin.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.AppUser", b =>
                {
                    b.Navigation("UserBadges");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("DilekYildizimSensin.Models.Event", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
